name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '26.0'
    
    - name: Build Release
      run: |
        xcodebuild -project "Memory Defragmenter.xcodeproj" \
          -scheme "Memory Defragmenter" \
          -configuration Release \
          -derivedDataPath build \
          clean build
    
    - name: Create DMG
      run: |
        chmod +x build_dmg.sh
        ./build_dmg.sh ${GITHUB_REF#refs/tags/v}
    
    - name: Create Tarball
      run: |
        chmod +x build_homebrew_release.sh  
        ./build_homebrew_release.sh ${GITHUB_REF#refs/tags/v}
    
    - name: Upload DMG
      uses: actions/upload-artifact@v3
      with:
        name: dmg
        path: MemoryDefragmenter-*.dmg
    
    - name: Upload Tarball
      uses: actions/upload-artifact@v3
      with:
        name: tarball
        path: MemoryDefragmenter-*.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    
    - name: Upload DMG to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dmg/MemoryDefragmenter-*.dmg
        asset_name: MemoryDefragmenter-${{ github.ref_name }}.dmg
        asset_content_type: application/x-apple-diskimage
    
    - name: Upload Tarball to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./tarball/MemoryDefragmenter-*.tar.gz
        asset_name: MemoryDefragmenter-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
